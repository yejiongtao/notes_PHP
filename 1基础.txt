1、PHP脚本在服务器上执行。
PHP 文件.php能够包含文本、HTML、CSS 以及 PHP 代码。

2、语法：
PHP 脚本可放置于文档中的任何位置。
PHP 脚本以 <?php 开头，以 ?> 结尾
函数、类、关键词对大小写不敏感，变量名对大小写敏感

echo "hello world!<br>";//<br>换行   <b>后面的加粗

3、变量：请把变量视为存储数据的容器
PHP 没有创建变量的命令。变量会在首次为其赋值时被创建
$color="red";	//记得分号！
echo "the color is ". $color;
$x=32;
echo $x;
echo "$x";//两种都行，这么随意

PHP 是一门类型松散的语言

4、变量作用域：
local：函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。
global：函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。注意是只能！

要想在函数中使用全局变量，则:global $x;
PHP 同时在名为 $GLOBALS[index] 的数组中存储了所有的全局变量。下标存有变量名。这个数组在函数内也可以访问，并能够用于直接更新全局变量。（应该说是储存有到目前为止出现的所有global）
function myTest() {
  $GLOBALS['y']=$GLOBALS['x']+$GLOBALS['y'];
} //中括号里面单引号或者双引号都是可以的

static:用在函数中，作用同C。（注意该变量依旧是局部变量）
static $c=0;
$c++;
或者：
$c=0;
static c;

5、常用的html text element:
<p>This is a paragraph</p>	//段之间距离比正常行距稍大
<br> (line break)		//过行
<hr> (horizontal rule)		//一条横线
<pre>This text is preformatted</pre>

6、函数：
function myf(){}
myf();

7、echo和print
echo：可以输出一个以上字符串，没有返回值
print:只能输出一个字符串，返回值始终是1
$car=array("bmw","benz");
echo "my car is $car[0]";

8、数据类型：字符串、整数、浮点数、逻辑、数组、对象、NULL。
字符串：单引号和双引号是一样的。。
整数：十六进制0x12，八进制077
浮点数：科学计数法$y=15e-4;
逻辑：即bool类型，true，false。直接echo的话，true会输出1，false什么都不输出
数组
对象：必须正确声明
	class Car
	{
		var $color;
		function Car($color='green')//这个是不是带参构造函数嘞？
		{
			$this->color=$color;
		}
		function what_color
		{
			return $this->color;
		}
	}
NULL：$x=null

var_dump($x);显示$x的类型、值。
注意：$x=1.1; $x=1;之后，$x的类型是int

9、字符串函数
echo strlen("hello");strlen() 常用于循环和其他函数，在确定字符串何时结束很重要时。
strpos() 函数用于检索字符串内指定的字符或文本。如果找到匹配，则会返回首个匹配的字符位置。如果未找到匹配，则将返回 FALSE。
	echo strpos('hello world','world');在前者中找‘整个’后者。是整个！
	输出的位置从0开始计数！
	stripos()对大小写不敏感。

还有其他很多很多函数，详情见参考手册。
bin2hex(string);把ascii的字符串转换成16进制值
crypt(str,salt);单向加密（hashing），其中salt是增加的字符串，若未指定则随机生成。
explode(seperator,string,limit);把字符串打散为数组，seperator是打散的依据，比如空格' '，但不能为空，若指定的seperator在字符串中找不到则不打散。limit可选。
	但是如果两个字符中间隔着多个空格，则输出的数组中会有一些是空格。
fprintf(stream,format,arg1,arg2,arg++);返回值是写入的长度。format与c中的差不多，多了%b表示二进制。
	$str = "Hello";
	$number = 123;
	$file = fopen("test.txt","w");
	echo fprintf($file,"%s world. Day number %u",$str,$number);
	占位符：fprintf($file,"%1\$f,%1\$u",$x);用两种形式类输出$x
	类似的有printf,sprintf,vprintf,vfprintf,vsprintf
sscanf(string,format,arg1,arg2,arg++);如果没有指定参数，则返回一个数组。
rtrim(string,charlist) 函数从字符串的末端开始删除空白字符或其他预定义字符。也可以自己指定要删除的字符
	ltrim();trim()（两端）
strcmp();对大小写敏感
	strncmp();对前n个字符进行比较
strcasecmp();对大小写不敏感
	strncasecmp();
strnatcmp();使用自然的算法进行比较：比如'2'会小于'10'
	strnatcasecmp();对大小写不敏感
strstr(string,search);搜索字符串的第一次出现
	strstr("hello world!",'o');则返回'o world!'
	stristr();对大小写不敏感（一般都是对大小写敏感的，不敏感的函数名会多一些东西）
strrev(string);反转
strtolower();strtoupper();

10、常量
常量自动贯穿全局，一旦定义无法改变、删除，不用$符号。
define("GREETING","Hello World");如果没有第三个参数，则默认为false，即greeting并不表示这个常量。
define("GREETING","Hello World",true);设为true之后，greeting也是可以找到这个常量的。
echo GREETING;

11、运算符
/并不是整除。
字符串串接：$str1=$str2."end";
	$str1.='end';
比较大小：（非常神奇）
	$x=100;
	$y='100';
	$x==$y;//true!发现只拿字符串中的第一个数字来比较
	$x===$y;//false,必须连类型也相等的时候才行
	$x!=$y;//false
	$x!==$y;//true
逻辑运算符：and or xor && || !
	其中and 和&&是一样一样的。
数组运算符：
	+:两个数组的联合（但不覆盖重复的键值，意思是重复的键，则值会保留左边那个）（好像是只用于关联数组）
	==:键值相同
	===：键值相同且顺序、类型相同
	!=
	!==

12、if switch while do-while for跟C都是一样一样的。
（获取时间getdate(hours);）
foreach用于数组遍历每一个键值
	$colors = array("red","green","blue","yellow"); 
	foreach ($colors as $value) //这里的$array名字也是可以自己改的
	{
		echo "$value <br>";
	}

13、PHP 的真正力量来自它的函数：它拥有超过 1000 个内建的函数。
函数可以有默认参数：
	function MyF($x=10){}

14、数组：索引数组、关联数组、多维数组。（数组是可以动态增加的，即随时加）
索引数组：（即砸门比较熟悉的用下标来访问的那种）
关联数组：$age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");
	调用：$age['Peter'];
	foreach($age as $x=>$x_value)//名字都可以自己起
	{}
count($array1);用来返回数组的元素数
ATTENTION:还有一大堆函数，包括排序什么的！

15、数组排序
sort() - 以升序对数组排序
rsort() - 以降序对数组排序
asort() - 根据值，以升序对关联数组进行排序
ksort() - 根据键，以升序对关联数组进行排序（key）
arsort() - 根据值，以降序对关联数组进行排序
krsort() - 根据键，以降序对关联数组进行排序

16、超全局变量，一些内置的变量，在局部中不需要global也可以使用。
$GLOBALS：在函数中$GLOBALS['z']，这个$z可能是原来不存在的全局变量，这之后就有了。
$_SERVER：保存关于报头、路径和脚本位置的信息,例如$_SERVER[SERVER_NAME]，还有好多。
$_REQUEST:用于收集 HTML 表单提交的数据
	<html>
	<body>

	<form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
	Name: <input type="text" name="fname">
	<input type="submit">
	</form>

	<?php 
	$name = $_REQUEST['fname']; 
	echo $name; 
	?>

	</body>
	</html>
$_POST:广泛用于收集提交 method="post" 的 HTML 表单后的表单数据。$_POST 也常用于传递变量。
	把上例中的$_REQUEST 换成$_POST 功能是一样的。
$_GET：可用于收集提交 HTML 表单 (method="get") 之后的表单数据。也可以收集 URL 中的发送的数据。
$_FILES
$_ENV
$_COOKIE
$_SESSION